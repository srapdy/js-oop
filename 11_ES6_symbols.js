// Symbols are functions that generate unique values
// Symbols are NOT constructor functions i.e., you cannot write new Symbol()
// Symbols can be used to generate private property and methods

const _color = Symbol(); // generates new value and assigns to _color
const _draw = Symbol(); // generates another new value
console.log(_color === _draw); // false; they are different
console.log(_color); // just prints Symbol()

class Circle {
    constructor(radius, color) {
        this.radius = radius; // this is a public property
        this[_color] = color; // name of the color property is stored in _color and not exposed (private)
    }
    // ES6 - the expression within [] is evaluated;
    // in this case it is a dynamic name generated by symbol that is used as function name
    [_draw]() {  // remember that functions declared outside of constructor are attached to the prototype
        console.log('draw circle');
    }
}

const c1 = new Circle(1, 'blue');
console.log(c1);

const names = Object.getOwnPropertyNames(c1); // returns an array of properties; radius is the only one here
const symbols = Object.getOwnPropertySymbols(c1); // returns an array of symbols
console.log(symbols); // symbol() for color is the only "own" (instance) symbol
const key = symbols[0];
console.log(key); // name for the color property; again only prints "Symbol()"
console.log(c1[key]); // prints value of color which is blue in our case